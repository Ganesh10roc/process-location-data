import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.File;
import java.io.IOException;
import java.util.*;
import java.util.stream.Collectors;
class Location {
 public String id;
 public double latitude;
 public double longitude;
}
class Metadata {
 public String id;
 public String type;
 public double rating;
 public int reviews;
}
public class ProcessLocationData {
 public static void main(String[] args) throws IOException {
 ObjectMapper objectMapper = new ObjectMapper();
 List<Location> locations = objectMapper.readValue(new File("locations.json"), new
TypeReference<List<Location>>() {});
 List<Metadata> metadata = objectMapper.readValue(new File("metadata.json"), new
TypeReference<List<Metadata>>() {});
 Map<String, Metadata> metadataMap = metadata.stream().collect(Collectors.toMap(m -> m.id, m -> m));
 List<Map<String, Object>> mergedData = new ArrayList<>();
 
 for (Location loc : locations) {
 Map<String, Object> entry = new HashMap<>();
 entry.put("id", loc.id);
 entry.put("latitude", loc.latitude);
 entry.put("longitude", loc.longitude);
 if (metadataMap.containsKey(loc.id)) {
 Metadata meta = metadataMap.get(loc.id);
 entry.put("type", meta.type);
 entry.put("rating", meta.rating);
 entry.put("reviews", meta.reviews);
 } else {
 entry.put("type", "Unknown");
 entry.put("rating", "N/A");
 entry.put("reviews", "N/A");
 }
 mergedData.add(entry);
 }
 Map<String, Long> typeCount = metadata.stream().collect(Collectors.groupingBy(m -> m.type,
Collectors.counting()));
 Map<String, Double> avgRating = metadata.stream().collect(Collectors.groupingBy(m -> m.type,
Collectors.averagingDouble(m -> m.rating)));
 Metadata mostReviewed = metadata.stream().max(Comparator.comparingInt(m -> m.reviews)).orElse(null);
 List<String> incompleteData = new ArrayList<>();
 for (Location loc : locations) {
 if (!metadataMap.containsKey(loc.id)) {
 incompleteData.add(loc.id);
 }
 }
 System.out.println("Valid Points Per Type: " + typeCount);
 System.out.println("Average Rating Per Type: " + avgRating);
 System.out.println("Location with Highest Reviews: " + (mostReviewed != null ? mostReviewed.id :
"None"));
 System.out.println("Incomplete Data Locations: " + incompleteData);
 }
}
